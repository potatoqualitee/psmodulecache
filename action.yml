name: "PowerShell Module Cache"
branding:
  icon: "download"
  color: "gray-dark"
description: "Cache modules from the PowerShell Gallery"
inputs:
  modules-to-cache:
    description: "The PowerShell modules to cache from the PowerShell Gallery"
    required: false
  shell-to-use:
    description: "The default shell to use. Defaults to pwsh. Options are pwsh or powershell."
    required: false
    default: "pwsh"
  final-to-cache:
    description: "Auto-populated module list"
    required: false
runs:
  using: "composite"
  steps:
    - id: psoutput
      shell: pwsh
      run: |
        if ("${{ inputs.modules-to-cache }}") {
          Write-Output "Getting variables for cacher"
          Write-Output "::set-output name=keygen::$(${{ github.action_path }}/main.ps1 -Type KeyGen -Module ${{ inputs.modules-to-cache }} -ShellToUse ${{ inputs.shell-to-use }})"
          Write-Output "::set-output name=modulepath::$(${{ github.action_path }}/main.ps1 -Type ModulePath)"
        } else {
          Write-Output "Installing modules"
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          $modulelist = "${{ inputs.final-to-cache }}"
          if ($modulelist -notmatch "\:") {
            Install-Module ${{ inputs.final-to-cache }} -ErrorAction Stop -Force -SkipPublisherCheck
          } else {
            # it's versioned
            $modules = $modulelist.Split(",").Trim()
            foreach ($module in $modules) {
                $item, $version = $module.Split(":")
                Install-Module $item -RequiredVersion $version -ErrorAction Stop -Force -SkipPublisherCheck
            }
          }
        }
outputs:
  keygen:
    description: "Unique Key Generator"
    value: ${{ steps.psoutput.outputs.keygen }}
  modulepath:
    description: "Default module path for OS"
    value: ${{ steps.psoutput.outputs.modulepath }}
  modules-to-cache:
    description: "Original request"
    value: ${{ inputs.modules-to-cache }}
