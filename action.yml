name: 'PowerShell Module Cache'
branding:
  icon: 'download'  
  color: 'gray-dark'
description: 'Cache modules from the PowerShell Gallery'
inputs:
  modules-to-cache:
    description: 'Modules to cache'
    required: true
outputs:
  needed: 
    description: "Needed modules"
    value: ${{ steps.psoutput.outputs.needed }}
  keygen: 
    description: "Key Generator"
    value: ${{ steps.psoutput.outputs.keygen }}
  modulepath: 
    description: "Default module path for OS"
    value: ${{ steps.psoutput.outputs.modulepath }}
  installed: 
    description: "All installed modules"
    value: ${{ steps.psoutput.outputs.installed }}
  modules-to-cache: 
    description: "Original request"
    value: ${{ inputs.modules-to-cache }}
runs:
  using: "composite"
  steps: 
    - id: intro
      shell: bash
      run: echo Finding modules that have not been installed in list ${{ inputs.modules-to-cache }}.
    - id: psoutput
      shell: pwsh
      run: |
        Write-Output "::set-output name=needed::$(${{ github.action_path }}/main.ps1 -Type Needed -Module ${{ inputs.modules-to-cache }})"
        Write-Output "::set-output name=keygen::$(${{ github.action_path }}/main.ps1 -Type KeyGen -Module ${{ inputs.modules-to-cache }})"
        Write-Output "::set-output name=modulepath::$(${{ github.action_path }}/main.ps1 -Type ModulePath -Module ${{ inputs.modules-to-cache }})"
        Write-Output "::set-output name=installed::$(Get-Module -ListAvailable | Select-Object -ExpandProperty Name)"
    - id: list-available
      shell: bash
      run: echo All modules currently installed ${{ steps.psoutput.outputs.installed }}