name: "PowerShell Module Cache"
branding:
  icon: "download"
  color: "gray-dark"
description: "Caching modules from PSRepositories"
inputs:
  modules-to-cache:
    description: "Name of PowerShell modules to cache from registered PsRepositories (PowerShell Gallery by default)"
    required: false
  modules-to-cache-prerelease:
    description: "Name of prerelease PowerShell modules to cache from registered PsRepositories (PowerShell Gallery by default). Uses the -AllowPrerelease parameter during Save-Module."
    required: false
  shell:
    description: "The default shell to use. Options are 'powershell' or 'pwsh' (default) or both."
    required: false
    default: "pwsh"
  updatable:
    description: "Triggers an update of one or more modules."
    required: false
    default: "false"
  prefixidentifier:
    description: "Prefixes the cache key name with the Workflow name ($env:GITHUB_WORKFLOW). Used to group cache keys."
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - id: psoutput
      shell: pwsh
      run: |
        Import-Module $env:GITHUB_ACTION_PATH/PSModuleCache.psd1
        Write-Output "Getting variables for cacher"

        $Parameters = @{
          Modules = "${{ inputs.modules-to-cache }}"
          PrereleaseModules = "${{ inputs.modules-to-cache-prerelease }}"
          Shells = "${{ inputs.shell }}"
          Updatable = [boolean]::Parse("${{ inputs.updatable }}")
          PrefixIdentifier = [boolean]::Parse("${{ inputs.prefixidentifier }}")
          ContainerJob = ("${{ job.container.id}}" -ne "")
        }
        Write-Output "Action Parameters = $([PsCustomObject]$Parameters)"

        $ActionParameters = New-ModuleCacheParameter @Parameters

        $ModuleCaches = Get-ModuleCache $ActionParameters
        "keygen=$($ModuleCaches.Key)" >> $env:GITHUB_OUTPUT

        $Paths = @(New-ModuleSavePath $ModuleCaches.ModuleCacheInformations)

        # Accommodate multi-line
        "modulepath<<EOF" >> $env:GITHUB_OUTPUT
        $Paths >> $env:GITHUB_OUTPUT
        "EOF" >> $env:GITHUB_OUTPUT

        $null = $ModuleCaches | Export-CliXml -Path (Join-Path $home -ChildPath $CacheFileName)

    - name: Run module cacher action
      id: cacher
      uses: actions/cache@v3.0.11
      with:
        key: ${{ steps.psoutput.outputs.keygen }}
        path: |
          ${{ steps.psoutput.outputs.modulepath }}

    - name: Install PowerShell modules
      id: finalstep
      shell: pwsh
      if: steps.cacher.outputs.cache-hit != 'true'
      run: |
        Write-Output "Saving all modules"

        Import-Module $env:GITHUB_ACTION_PATH/PSModuleCache.psd1
        Save-ModuleCache
