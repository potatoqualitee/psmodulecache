name: MatrixCacheDemo

on:
  workflow_dispatch:

jobs:
  MatrixCacheDemo:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2.5.0

      - name: Set Required repositories PS Core
        shell: pwsh
        run: |
          $Repositories = @(
              [PsCustomObject]@{
                  name            = 'OttoMatt'
                  publishlocation = 'https://www.myget.org/F/ottomatt/api/v2/package'
                  sourcelocation  = 'https://www.myget.org/F/ottomatt/api/v2'
              }
          )
          foreach ($Repository in $Repositories) {
              $Name = $Repository.Name
              try {
                  Get-PSRepository $Name -ErrorAction Stop >$null
              } catch {
                  if ($_.CategoryInfo.Category -ne 'ObjectNotFound') {
                    throw $_
                  } else {
                      $Parameters = @{
                          Name               = $Name
                          SourceLocation     = $Repository.SourceLocation
                          PublishLocation    = $Repository.PublishLocation
                          InstallationPolicy = 'Trusted'
                      }
                      Write-Output "Register repository '$($Repository.Name)'"
                      Register-PSRepository @Parameters
                  }
              }
          }
      - name: Cache modules
        id: psmodulecache
        uses: ./
        with:
          modules-to-cache: DTW.PS.FileSystem,PnP.PowerShell::,InvokeBuild:5.9.10
          modules-to-cache-prerelease: PnP.PowerShell::,pester:5.3.0-rc1
          shell: powershell,pwsh
          updatable: "true"
          prefixidentifier: "true"

      - name: Get required modules on Windows PowerShell
        shell: pwsh
        run: |
          # 'DTW.PS.FileSystem','PnP.PowerShell','InvokeBuild','Pester'|
          # foreach {
          #    Import-Module $_
          #    Write-Host "$_ '$(Get-Module $_ -ListAvailabLe|Select-Object Name,Version,@{Name='PreRelease';e={$_.PrivateData.PSData.Prerelease}},RepositorySourceLocation)'"
          # }

          Get-Module Pester -ListAvailabLe
